/**
 * Samsara API
 * # Introduction The Samsara REST API lets you interact with the Samsara Cloud from anything that can send an HTTP request. With the Samsara API you can build powerful applications and custom solutions with sensor data.  Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.  API access to the Samsara cloud is available to all Samsara administrators. If you’d like to try the API, [contact us](https://www.samsara.com/free-trial). The API is currently in beta and may be subject to frequent changes.  # Connecting to the API There are two ways to connect to the API. If you prefer to use the API in Javascript or Python, we supply SDKs which you can download here: [Javascript SDK](https://github.com/samsarahq/samsara-js), [Python SDK](https://github.com/samsarahq/samsara-python).  If you’d rather use another language to interact with the Samsara API, the endpoints and examples are in the reference guide below.  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'models/AddressParam', 'models/CreateDispatchJobsParam', 'models/DispatchJobsResponse', 'models/DispatchJobsResponseDispatchJobs', 'models/DriversRespose', 'models/DriversResposeDrivers', 'models/DriversSummaryParam', 'models/DriversSummaryResponse', 'models/DriversSummaryResponseSummaries', 'models/ErrorResponse', 'models/FleetdispatchJobscreateDispatchJobs', 'models/FleetdispatchJobsupdateDispatchJobs', 'models/GetDispatchJobsParam', 'models/GroupDriversParam', 'models/GroupParam', 'models/HistoryParam', 'models/HosLogsParam', 'models/HosLogsResponse', 'models/HosLogsResponseLogs', 'models/HumidityResponse', 'models/HumidityResponseSensors', 'models/InlineResponse200', 'models/InlineResponse2001', 'models/InlineResponse2002', 'models/Sensor', 'models/SensorHistoryResponse', 'models/SensorHistoryResponseResults', 'models/SensorParam', 'models/SensorshistorySeries', 'models/TemperatureResponse', 'models/TemperatureResponseSensors', 'models/TripResponse', 'models/TripResponseEndCoordinates', 'models/TripResponseStartCoordinates', 'models/TripResponseTrips', 'models/TripsParam', 'models/UpdateDispatchJobsParam', 'models/Vehicle', 'models/VehicleLocation', 'models/VehicleUpdateParam', 'client/DefaultApi', 'client/FleetApi', 'client/SensorsApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./models/AddressParam'), require('./models/CreateDispatchJobsParam'), require('./models/DispatchJobsResponse'), require('./models/DispatchJobsResponseDispatchJobs'), require('./models/DriversRespose'), require('./models/DriversResposeDrivers'), require('./models/DriversSummaryParam'), require('./models/DriversSummaryResponse'), require('./models/DriversSummaryResponseSummaries'), require('./models/ErrorResponse'), require('./models/FleetdispatchJobscreateDispatchJobs'), require('./models/FleetdispatchJobsupdateDispatchJobs'), require('./models/GetDispatchJobsParam'), require('./models/GroupDriversParam'), require('./models/GroupParam'), require('./models/HistoryParam'), require('./models/HosLogsParam'), require('./models/HosLogsResponse'), require('./models/HosLogsResponseLogs'), require('./models/HumidityResponse'), require('./models/HumidityResponseSensors'), require('./models/InlineResponse200'), require('./models/InlineResponse2001'), require('./models/InlineResponse2002'), require('./models/Sensor'), require('./models/SensorHistoryResponse'), require('./models/SensorHistoryResponseResults'), require('./models/SensorParam'), require('./models/SensorshistorySeries'), require('./models/TemperatureResponse'), require('./models/TemperatureResponseSensors'), require('./models/TripResponse'), require('./models/TripResponseEndCoordinates'), require('./models/TripResponseStartCoordinates'), require('./models/TripResponseTrips'), require('./models/TripsParam'), require('./models/UpdateDispatchJobsParam'), require('./models/Vehicle'), require('./models/VehicleLocation'), require('./models/VehicleUpdateParam'), require('./client/DefaultApi'), require('./client/FleetApi'), require('./client/SensorsApi'));
  }
}(function(ApiClient, AddressParam, CreateDispatchJobsParam, DispatchJobsResponse, DispatchJobsResponseDispatchJobs, DriversRespose, DriversResposeDrivers, DriversSummaryParam, DriversSummaryResponse, DriversSummaryResponseSummaries, ErrorResponse, FleetdispatchJobscreateDispatchJobs, FleetdispatchJobsupdateDispatchJobs, GetDispatchJobsParam, GroupDriversParam, GroupParam, HistoryParam, HosLogsParam, HosLogsResponse, HosLogsResponseLogs, HumidityResponse, HumidityResponseSensors, InlineResponse200, InlineResponse2001, InlineResponse2002, Sensor, SensorHistoryResponse, SensorHistoryResponseResults, SensorParam, SensorshistorySeries, TemperatureResponse, TemperatureResponseSensors, TripResponse, TripResponseEndCoordinates, TripResponseStartCoordinates, TripResponseTrips, TripsParam, UpdateDispatchJobsParam, Vehicle, VehicleLocation, VehicleUpdateParam, DefaultApi, FleetApi, SensorsApi) {
  'use strict';

  /**
   * _IntroductionThe_Samsara_REST_API_lets_you_interact_with_the_Samsara_Cloud_from_anything_that_can_send_an_HTTP_request__With_the_Samsara_API_you_can_build_powerful_applications_and_custom_solutions_with_sensor_data_Samsara_has_endpoints_available_to_track_and_analyze_sensors_vehicles_and_entire_fleets__If_youre_familiar_with_what_you_can_build_with_a_REST_API_the_following_API_reference_guide_will_be_your_go_to_resource_API_access_to_the_Samsara_cloud_is_available_to_all_Samsara_administrators__If_youd_like_to_try_the_API__contact_us_httpswww_samsara_comfree_trial__The_API_is_currently_in_beta_and_may_be_subject_to_frequent_changes__Connecting_to_the_APIThere_are_two_ways_to_connect_to_the_API__If_you_prefer_to_use_the_API_in_Javascript_or_Python_we_supply_SDKs_which_you_can_download_here__Javascript_SDK_httpsgithub_comsamsarahqsamsara_js__Python_SDK_httpsgithub_comsamsarahqsamsara_python_If_youd_rather_use_another_language_to_interact_with_the_Samsara_API_the_endpoints_and_examples_are_in_the_reference_guide_below__.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var SamsaraApi = require('index'); // See note below*.
   * var xxxSvc = new SamsaraApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new SamsaraApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new SamsaraApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new SamsaraApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AddressParam model constructor.
     * @property {module:models/AddressParam}
     */
    AddressParam: AddressParam,
    /**
     * The CreateDispatchJobsParam model constructor.
     * @property {module:models/CreateDispatchJobsParam}
     */
    CreateDispatchJobsParam: CreateDispatchJobsParam,
    /**
     * The DispatchJobsResponse model constructor.
     * @property {module:models/DispatchJobsResponse}
     */
    DispatchJobsResponse: DispatchJobsResponse,
    /**
     * The DispatchJobsResponseDispatchJobs model constructor.
     * @property {module:models/DispatchJobsResponseDispatchJobs}
     */
    DispatchJobsResponseDispatchJobs: DispatchJobsResponseDispatchJobs,
    /**
     * The DriversRespose model constructor.
     * @property {module:models/DriversRespose}
     */
    DriversRespose: DriversRespose,
    /**
     * The DriversResposeDrivers model constructor.
     * @property {module:models/DriversResposeDrivers}
     */
    DriversResposeDrivers: DriversResposeDrivers,
    /**
     * The DriversSummaryParam model constructor.
     * @property {module:models/DriversSummaryParam}
     */
    DriversSummaryParam: DriversSummaryParam,
    /**
     * The DriversSummaryResponse model constructor.
     * @property {module:models/DriversSummaryResponse}
     */
    DriversSummaryResponse: DriversSummaryResponse,
    /**
     * The DriversSummaryResponseSummaries model constructor.
     * @property {module:models/DriversSummaryResponseSummaries}
     */
    DriversSummaryResponseSummaries: DriversSummaryResponseSummaries,
    /**
     * The ErrorResponse model constructor.
     * @property {module:models/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The FleetdispatchJobscreateDispatchJobs model constructor.
     * @property {module:models/FleetdispatchJobscreateDispatchJobs}
     */
    FleetdispatchJobscreateDispatchJobs: FleetdispatchJobscreateDispatchJobs,
    /**
     * The FleetdispatchJobsupdateDispatchJobs model constructor.
     * @property {module:models/FleetdispatchJobsupdateDispatchJobs}
     */
    FleetdispatchJobsupdateDispatchJobs: FleetdispatchJobsupdateDispatchJobs,
    /**
     * The GetDispatchJobsParam model constructor.
     * @property {module:models/GetDispatchJobsParam}
     */
    GetDispatchJobsParam: GetDispatchJobsParam,
    /**
     * The GroupDriversParam model constructor.
     * @property {module:models/GroupDriversParam}
     */
    GroupDriversParam: GroupDriversParam,
    /**
     * The GroupParam model constructor.
     * @property {module:models/GroupParam}
     */
    GroupParam: GroupParam,
    /**
     * The HistoryParam model constructor.
     * @property {module:models/HistoryParam}
     */
    HistoryParam: HistoryParam,
    /**
     * The HosLogsParam model constructor.
     * @property {module:models/HosLogsParam}
     */
    HosLogsParam: HosLogsParam,
    /**
     * The HosLogsResponse model constructor.
     * @property {module:models/HosLogsResponse}
     */
    HosLogsResponse: HosLogsResponse,
    /**
     * The HosLogsResponseLogs model constructor.
     * @property {module:models/HosLogsResponseLogs}
     */
    HosLogsResponseLogs: HosLogsResponseLogs,
    /**
     * The HumidityResponse model constructor.
     * @property {module:models/HumidityResponse}
     */
    HumidityResponse: HumidityResponse,
    /**
     * The HumidityResponseSensors model constructor.
     * @property {module:models/HumidityResponseSensors}
     */
    HumidityResponseSensors: HumidityResponseSensors,
    /**
     * The InlineResponse200 model constructor.
     * @property {module:models/InlineResponse200}
     */
    InlineResponse200: InlineResponse200,
    /**
     * The InlineResponse2001 model constructor.
     * @property {module:models/InlineResponse2001}
     */
    InlineResponse2001: InlineResponse2001,
    /**
     * The InlineResponse2002 model constructor.
     * @property {module:models/InlineResponse2002}
     */
    InlineResponse2002: InlineResponse2002,
    /**
     * The Sensor model constructor.
     * @property {module:models/Sensor}
     */
    Sensor: Sensor,
    /**
     * The SensorHistoryResponse model constructor.
     * @property {module:models/SensorHistoryResponse}
     */
    SensorHistoryResponse: SensorHistoryResponse,
    /**
     * The SensorHistoryResponseResults model constructor.
     * @property {module:models/SensorHistoryResponseResults}
     */
    SensorHistoryResponseResults: SensorHistoryResponseResults,
    /**
     * The SensorParam model constructor.
     * @property {module:models/SensorParam}
     */
    SensorParam: SensorParam,
    /**
     * The SensorshistorySeries model constructor.
     * @property {module:models/SensorshistorySeries}
     */
    SensorshistorySeries: SensorshistorySeries,
    /**
     * The TemperatureResponse model constructor.
     * @property {module:models/TemperatureResponse}
     */
    TemperatureResponse: TemperatureResponse,
    /**
     * The TemperatureResponseSensors model constructor.
     * @property {module:models/TemperatureResponseSensors}
     */
    TemperatureResponseSensors: TemperatureResponseSensors,
    /**
     * The TripResponse model constructor.
     * @property {module:models/TripResponse}
     */
    TripResponse: TripResponse,
    /**
     * The TripResponseEndCoordinates model constructor.
     * @property {module:models/TripResponseEndCoordinates}
     */
    TripResponseEndCoordinates: TripResponseEndCoordinates,
    /**
     * The TripResponseStartCoordinates model constructor.
     * @property {module:models/TripResponseStartCoordinates}
     */
    TripResponseStartCoordinates: TripResponseStartCoordinates,
    /**
     * The TripResponseTrips model constructor.
     * @property {module:models/TripResponseTrips}
     */
    TripResponseTrips: TripResponseTrips,
    /**
     * The TripsParam model constructor.
     * @property {module:models/TripsParam}
     */
    TripsParam: TripsParam,
    /**
     * The UpdateDispatchJobsParam model constructor.
     * @property {module:models/UpdateDispatchJobsParam}
     */
    UpdateDispatchJobsParam: UpdateDispatchJobsParam,
    /**
     * The Vehicle model constructor.
     * @property {module:models/Vehicle}
     */
    Vehicle: Vehicle,
    /**
     * The VehicleLocation model constructor.
     * @property {module:models/VehicleLocation}
     */
    VehicleLocation: VehicleLocation,
    /**
     * The VehicleUpdateParam model constructor.
     * @property {module:models/VehicleUpdateParam}
     */
    VehicleUpdateParam: VehicleUpdateParam,
    /**
     * The DefaultApi service constructor.
     * @property {module:client/DefaultApi}
     */
    DefaultApi: DefaultApi,
    /**
     * The FleetApi service constructor.
     * @property {module:client/FleetApi}
     */
    FleetApi: FleetApi,
    /**
     * The SensorsApi service constructor.
     * @property {module:client/SensorsApi}
     */
    SensorsApi: SensorsApi
  };

  return exports;
}));
