/**
 * Samsara API
 * 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'models/AddressParam', 'models/ErrorResponse', 'models/GroupParam', 'models/HistoryParam', 'models/HumidityResponse', 'models/HumidityResponseSensors', 'models/InlineResponse200', 'models/InlineResponse2001', 'models/InlineResponse2002', 'models/Sensor', 'models/SensorHistoryResponse', 'models/SensorHistoryResponseResults', 'models/SensorParam', 'models/SensorshistorySeries', 'models/TemperatureResponse', 'models/TemperatureResponseSensors', 'models/TripResponse', 'models/TripResponseEndCoordinates', 'models/TripResponseStartCoordinates', 'models/TripResponseTrips', 'models/TripsParam', 'models/Vehicle', 'models/VehicleLocation', 'models/VehicleUpdateParam', 'client/DefaultApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./models/AddressParam'), require('./models/ErrorResponse'), require('./models/GroupParam'), require('./models/HistoryParam'), require('./models/HumidityResponse'), require('./models/HumidityResponseSensors'), require('./models/InlineResponse200'), require('./models/InlineResponse2001'), require('./models/InlineResponse2002'), require('./models/Sensor'), require('./models/SensorHistoryResponse'), require('./models/SensorHistoryResponseResults'), require('./models/SensorParam'), require('./models/SensorshistorySeries'), require('./models/TemperatureResponse'), require('./models/TemperatureResponseSensors'), require('./models/TripResponse'), require('./models/TripResponseEndCoordinates'), require('./models/TripResponseStartCoordinates'), require('./models/TripResponseTrips'), require('./models/TripsParam'), require('./models/Vehicle'), require('./models/VehicleLocation'), require('./models/VehicleUpdateParam'), require('./client/DefaultApi'));
  }
}(function(ApiClient, AddressParam, ErrorResponse, GroupParam, HistoryParam, HumidityResponse, HumidityResponseSensors, InlineResponse200, InlineResponse2001, InlineResponse2002, Sensor, SensorHistoryResponse, SensorHistoryResponseResults, SensorParam, SensorshistorySeries, TemperatureResponse, TemperatureResponseSensors, TripResponse, TripResponseEndCoordinates, TripResponseStartCoordinates, TripResponseTrips, TripsParam, Vehicle, VehicleLocation, VehicleUpdateParam, DefaultApi) {
  'use strict';

  /**
   * ERROR_UNKNOWN.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var SamsaraApi = require('index'); // See note below*.
   * var xxxSvc = new SamsaraApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new SamsaraApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new SamsaraApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new SamsaraApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AddressParam model constructor.
     * @property {module:models/AddressParam}
     */
    AddressParam: AddressParam,
    /**
     * The ErrorResponse model constructor.
     * @property {module:models/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The GroupParam model constructor.
     * @property {module:models/GroupParam}
     */
    GroupParam: GroupParam,
    /**
     * The HistoryParam model constructor.
     * @property {module:models/HistoryParam}
     */
    HistoryParam: HistoryParam,
    /**
     * The HumidityResponse model constructor.
     * @property {module:models/HumidityResponse}
     */
    HumidityResponse: HumidityResponse,
    /**
     * The HumidityResponseSensors model constructor.
     * @property {module:models/HumidityResponseSensors}
     */
    HumidityResponseSensors: HumidityResponseSensors,
    /**
     * The InlineResponse200 model constructor.
     * @property {module:models/InlineResponse200}
     */
    InlineResponse200: InlineResponse200,
    /**
     * The InlineResponse2001 model constructor.
     * @property {module:models/InlineResponse2001}
     */
    InlineResponse2001: InlineResponse2001,
    /**
     * The InlineResponse2002 model constructor.
     * @property {module:models/InlineResponse2002}
     */
    InlineResponse2002: InlineResponse2002,
    /**
     * The Sensor model constructor.
     * @property {module:models/Sensor}
     */
    Sensor: Sensor,
    /**
     * The SensorHistoryResponse model constructor.
     * @property {module:models/SensorHistoryResponse}
     */
    SensorHistoryResponse: SensorHistoryResponse,
    /**
     * The SensorHistoryResponseResults model constructor.
     * @property {module:models/SensorHistoryResponseResults}
     */
    SensorHistoryResponseResults: SensorHistoryResponseResults,
    /**
     * The SensorParam model constructor.
     * @property {module:models/SensorParam}
     */
    SensorParam: SensorParam,
    /**
     * The SensorshistorySeries model constructor.
     * @property {module:models/SensorshistorySeries}
     */
    SensorshistorySeries: SensorshistorySeries,
    /**
     * The TemperatureResponse model constructor.
     * @property {module:models/TemperatureResponse}
     */
    TemperatureResponse: TemperatureResponse,
    /**
     * The TemperatureResponseSensors model constructor.
     * @property {module:models/TemperatureResponseSensors}
     */
    TemperatureResponseSensors: TemperatureResponseSensors,
    /**
     * The TripResponse model constructor.
     * @property {module:models/TripResponse}
     */
    TripResponse: TripResponse,
    /**
     * The TripResponseEndCoordinates model constructor.
     * @property {module:models/TripResponseEndCoordinates}
     */
    TripResponseEndCoordinates: TripResponseEndCoordinates,
    /**
     * The TripResponseStartCoordinates model constructor.
     * @property {module:models/TripResponseStartCoordinates}
     */
    TripResponseStartCoordinates: TripResponseStartCoordinates,
    /**
     * The TripResponseTrips model constructor.
     * @property {module:models/TripResponseTrips}
     */
    TripResponseTrips: TripResponseTrips,
    /**
     * The TripsParam model constructor.
     * @property {module:models/TripsParam}
     */
    TripsParam: TripsParam,
    /**
     * The Vehicle model constructor.
     * @property {module:models/Vehicle}
     */
    Vehicle: Vehicle,
    /**
     * The VehicleLocation model constructor.
     * @property {module:models/VehicleLocation}
     */
    VehicleLocation: VehicleLocation,
    /**
     * The VehicleUpdateParam model constructor.
     * @property {module:models/VehicleUpdateParam}
     */
    VehicleUpdateParam: VehicleUpdateParam,
    /**
     * The DefaultApi service constructor.
     * @property {module:client/DefaultApi}
     */
    DefaultApi: DefaultApi
  };

  return exports;
}));
