/**
 * Samsara API
 * 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'models/SensorshistorySeries'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SensorshistorySeries'));
  } else {
    // Browser globals (root is window)
    if (!root.SamsaraApi) {
      root.SamsaraApi = {};
    }
    root.SamsaraApi.HistoryParam = factory(root.SamsaraApi.ApiClient, root.SamsaraApi.SensorshistorySeries);
  }
}(this, function(ApiClient, SensorshistorySeries) {
  'use strict';




  /**
   * The HistoryParam model module.
   * @module models/HistoryParam
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>HistoryParam</code>.
   * @alias module:models/HistoryParam
   * @class
   * @param groupId {Integer} 
   * @param startMs {Integer} 
   * @param endMs {Integer} 
   * @param stepMs {Integer} 
   * @param series {Array.<module:models/SensorshistorySeries>} 
   */
  var exports = function(groupId, startMs, endMs, stepMs, series) {
    var _this = this;

    _this['groupId'] = groupId;
    _this['startMs'] = startMs;
    _this['endMs'] = endMs;
    _this['stepMs'] = stepMs;
    _this['series'] = series;

  };

  /**
   * Constructs a <code>HistoryParam</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:models/HistoryParam} obj Optional instance to populate.
   * @return {module:models/HistoryParam} The populated <code>HistoryParam</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('groupId')) {
        obj['groupId'] = ApiClient.convertToType(data['groupId'], 'Integer');
      }
      if (data.hasOwnProperty('startMs')) {
        obj['startMs'] = ApiClient.convertToType(data['startMs'], 'Integer');
      }
      if (data.hasOwnProperty('endMs')) {
        obj['endMs'] = ApiClient.convertToType(data['endMs'], 'Integer');
      }
      if (data.hasOwnProperty('stepMs')) {
        obj['stepMs'] = ApiClient.convertToType(data['stepMs'], 'Integer');
      }
      if (data.hasOwnProperty('series')) {
        obj['series'] = ApiClient.convertToType(data['series'], [SensorshistorySeries]);
      }
      if (data.hasOwnProperty('fillMissing')) {
        obj['fillMissing'] = ApiClient.convertToType(data['fillMissing'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {Integer} groupId
   */
  exports.prototype['groupId'] = undefined;
  /**
   * @member {Integer} startMs
   */
  exports.prototype['startMs'] = undefined;
  /**
   * @member {Integer} endMs
   */
  exports.prototype['endMs'] = undefined;
  /**
   * @member {Integer} stepMs
   */
  exports.prototype['stepMs'] = undefined;
  /**
   * @member {Array.<module:models/SensorshistorySeries>} series
   */
  exports.prototype['series'] = undefined;
  /**
   * @member {module:models/HistoryParam.FillMissingEnum} fillMissing
   * @default 'withNull'
   */
  exports.prototype['fillMissing'] = 'withNull';


  /**
   * Allowed values for the <code>fillMissing</code> property.
   * @enum {String}
   * @readonly
   */
  exports.FillMissingEnum = {
    /**
     * value: "withNull"
     * @const
     */
    "withNull": "withNull",
    /**
     * value: "withPrevious"
     * @const
     */
    "withPrevious": "withPrevious"  };


  return exports;
}));


