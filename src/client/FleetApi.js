/**
 * Samsara API
 * # Introduction The Samsara REST API lets you interact with the Samsara Cloud from anything that can send an HTTP request. With the Samsara API you can build powerful applications and custom solutions with sensor data.  Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.  API access to the Samsara cloud is available to all Samsara administrators. If you’d like to try the API, [contact us](https://www.samsara.com/free-trial). The API is currently in beta and may be subject to frequent changes.  # Connecting to the API There are two ways to connect to the API. If you prefer to use the API in Javascript or Python, we supply SDKs which you can download here: [Javascript SDK](https://github.com/samsarahq/samsara-js), [Python SDK](https://github.com/samsarahq/samsara-python).  If you’d rather use another language to interact with the Samsara API, the endpoints and examples are in the reference guide below.  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'models/AddressParam', 'models/ErrorResponse', 'models/DispatchJobsResponse', 'models/CreateDispatchJobsParam', 'models/InlineResponse200', 'models/GroupParam', 'models/GetDispatchJobsParam', 'models/DriversRespose', 'models/GroupDriversParam', 'models/HosLogsResponse', 'models/HosLogsParam', 'models/InlineResponse2001', 'models/TripResponse', 'models/TripsParam', 'models/UpdateDispatchJobsParam', 'models/VehicleUpdateParam'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../models/AddressParam'), require('../models/ErrorResponse'), require('../models/DispatchJobsResponse'), require('../models/CreateDispatchJobsParam'), require('../models/InlineResponse200'), require('../models/GroupParam'), require('../models/GetDispatchJobsParam'), require('../models/DriversRespose'), require('../models/GroupDriversParam'), require('../models/HosLogsResponse'), require('../models/HosLogsParam'), require('../models/InlineResponse2001'), require('../models/TripResponse'), require('../models/TripsParam'), require('../models/UpdateDispatchJobsParam'), require('../models/VehicleUpdateParam'));
  } else {
    // Browser globals (root is window)
    if (!root.SamsaraApi) {
      root.SamsaraApi = {};
    }
    root.SamsaraApi.FleetApi = factory(root.SamsaraApi.ApiClient, root.SamsaraApi.AddressParam, root.SamsaraApi.ErrorResponse, root.SamsaraApi.DispatchJobsResponse, root.SamsaraApi.CreateDispatchJobsParam, root.SamsaraApi.InlineResponse200, root.SamsaraApi.GroupParam, root.SamsaraApi.GetDispatchJobsParam, root.SamsaraApi.DriversRespose, root.SamsaraApi.GroupDriversParam, root.SamsaraApi.HosLogsResponse, root.SamsaraApi.HosLogsParam, root.SamsaraApi.InlineResponse2001, root.SamsaraApi.TripResponse, root.SamsaraApi.TripsParam, root.SamsaraApi.UpdateDispatchJobsParam, root.SamsaraApi.VehicleUpdateParam);
  }
}(this, function(ApiClient, AddressParam, ErrorResponse, DispatchJobsResponse, CreateDispatchJobsParam, InlineResponse200, GroupParam, GetDispatchJobsParam, DriversRespose, GroupDriversParam, HosLogsResponse, HosLogsParam, InlineResponse2001, TripResponse, TripsParam, UpdateDispatchJobsParam, VehicleUpdateParam) {
  'use strict';

  /**
   * Fleet service.
   * @module client/FleetApi
   * @version 1.0.0
   */

  /**
   * Constructs a new FleetApi. 
   * @alias module:client/FleetApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addFleetAddress operation.
     * @callback module:client/FleetApi~addFleetAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /fleet/add_address
     * This method adds an address book entry to the specified group.
     * @param {String} accessToken Samsara API access token.
     * @param {module:models/AddressParam} addressParam 
     * @param {module:client/FleetApi~addFleetAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFleetAddress = function(accessToken, addressParam, callback) {
      var postBody = addressParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling addFleetAddress";
      }

      // verify the required parameter 'addressParam' is set
      if (addressParam == undefined || addressParam == null) {
        throw "Missing the required parameter 'addressParam' when calling addFleetAddress";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleet/add_address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFleetDispatchJobs operation.
     * @callback module:client/FleetApi~createFleetDispatchJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:models/DispatchJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /fleet/dispatch_jobs/create
     * Create dispatch jobs in the specified group.
     * @param {String} accessToken Samsara API access token.
     * @param {module:models/CreateDispatchJobsParam} createDispatchJobsParam 
     * @param {module:client/FleetApi~createFleetDispatchJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/DispatchJobsResponse}
     */
    this.createFleetDispatchJobs = function(accessToken, createDispatchJobsParam, callback) {
      var postBody = createDispatchJobsParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling createFleetDispatchJobs";
      }

      // verify the required parameter 'createDispatchJobsParam' is set
      if (createDispatchJobsParam == undefined || createDispatchJobsParam == null) {
        throw "Missing the required parameter 'createDispatchJobsParam' when calling createFleetDispatchJobs";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispatchJobsResponse;

      return this.apiClient.callApi(
        '/fleet/dispatch_jobs/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleet operation.
     * @callback module:client/FleetApi~getFleetCallback
     * @param {String} error Error message, if any.
     * @param {module:models/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /fleet/list
     * Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.
     * @param {String} accessToken Samsara API access token.
     * @param {module:models/GroupParam} groupParam Group ID to query.
     * @param {module:client/FleetApi~getFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/InlineResponse200}
     */
    this.getFleet = function(accessToken, groupParam, callback) {
      var postBody = groupParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling getFleet";
      }

      // verify the required parameter 'groupParam' is set
      if (groupParam == undefined || groupParam == null) {
        throw "Missing the required parameter 'groupParam' when calling getFleet";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/fleet/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleetDispatchJobs operation.
     * @callback module:client/FleetApi~getFleetDispatchJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:models/DispatchJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /fleet/dispatch_jobs
     * Get the dispatch jobs for the specified group.
     * @param {String} accessToken Samsara API access token.
     * @param {module:models/GetDispatchJobsParam} getDispatchJobsParam 
     * @param {module:client/FleetApi~getFleetDispatchJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/DispatchJobsResponse}
     */
    this.getFleetDispatchJobs = function(accessToken, getDispatchJobsParam, callback) {
      var postBody = getDispatchJobsParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling getFleetDispatchJobs";
      }

      // verify the required parameter 'getDispatchJobsParam' is set
      if (getDispatchJobsParam == undefined || getDispatchJobsParam == null) {
        throw "Missing the required parameter 'getDispatchJobsParam' when calling getFleetDispatchJobs";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispatchJobsResponse;

      return this.apiClient.callApi(
        '/fleet/dispatch_jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleetDrivers operation.
     * @callback module:client/FleetApi~getFleetDriversCallback
     * @param {String} error Error message, if any.
     * @param {module:models/DriversRespose} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /fleet/drivers
     * Get all the drivers for the specified group.
     * @param {String} accessToken Samsara API access token.
     * @param {module:models/GroupDriversParam} groupDriversParam 
     * @param {module:client/FleetApi~getFleetDriversCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/DriversRespose}
     */
    this.getFleetDrivers = function(accessToken, groupDriversParam, callback) {
      var postBody = groupDriversParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling getFleetDrivers";
      }

      // verify the required parameter 'groupDriversParam' is set
      if (groupDriversParam == undefined || groupDriversParam == null) {
        throw "Missing the required parameter 'groupDriversParam' when calling getFleetDrivers";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DriversRespose;

      return this.apiClient.callApi(
        '/fleet/drivers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleetHosLogs operation.
     * @callback module:client/FleetApi~getFleetHosLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:models/HosLogsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /fleet/hos_logs
     * Get the HOS (hours of service) logs for the specified driver.
     * @param {String} accessToken Samsara API access token.
     * @param {module:models/HosLogsParam} hosLogsParam 
     * @param {module:client/FleetApi~getFleetHosLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/HosLogsResponse}
     */
    this.getFleetHosLogs = function(accessToken, hosLogsParam, callback) {
      var postBody = hosLogsParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling getFleetHosLogs";
      }

      // verify the required parameter 'hosLogsParam' is set
      if (hosLogsParam == undefined || hosLogsParam == null) {
        throw "Missing the required parameter 'hosLogsParam' when calling getFleetHosLogs";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HosLogsResponse;

      return this.apiClient.callApi(
        '/fleet/hos_logs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleetLocations operation.
     * @callback module:client/FleetApi~getFleetLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:models/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /fleet/locations
     * Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.
     * @param {String} accessToken Samsara API access token.
     * @param {module:models/GroupParam} groupParam Group ID to query.
     * @param {module:client/FleetApi~getFleetLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/InlineResponse2001}
     */
    this.getFleetLocations = function(accessToken, groupParam, callback) {
      var postBody = groupParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling getFleetLocations";
      }

      // verify the required parameter 'groupParam' is set
      if (groupParam == undefined || groupParam == null) {
        throw "Missing the required parameter 'groupParam' when calling getFleetLocations";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/fleet/locations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleetTrips operation.
     * @callback module:client/FleetApi~getFleetTripsCallback
     * @param {String} error Error message, if any.
     * @param {module:models/TripResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /fleet/trips
     * Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
     * @param {String} accessToken Samsara API access token.
     * @param {module:models/TripsParam} tripsParam Group ID, vehicle ID and time range to query.
     * @param {module:client/FleetApi~getFleetTripsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/TripResponse}
     */
    this.getFleetTrips = function(accessToken, tripsParam, callback) {
      var postBody = tripsParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling getFleetTrips";
      }

      // verify the required parameter 'tripsParam' is set
      if (tripsParam == undefined || tripsParam == null) {
        throw "Missing the required parameter 'tripsParam' when calling getFleetTrips";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TripResponse;

      return this.apiClient.callApi(
        '/fleet/trips', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFleetDispatchJobs operation.
     * @callback module:client/FleetApi~updateFleetDispatchJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:models/DispatchJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /fleet/dispatch_jobs/update
     * Update dispatch jobs in the specified group.
     * @param {String} accessToken Samsara API access token.
     * @param {module:models/UpdateDispatchJobsParam} updateDispatchJobsParam 
     * @param {module:client/FleetApi~updateFleetDispatchJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/DispatchJobsResponse}
     */
    this.updateFleetDispatchJobs = function(accessToken, updateDispatchJobsParam, callback) {
      var postBody = updateDispatchJobsParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling updateFleetDispatchJobs";
      }

      // verify the required parameter 'updateDispatchJobsParam' is set
      if (updateDispatchJobsParam == undefined || updateDispatchJobsParam == null) {
        throw "Missing the required parameter 'updateDispatchJobsParam' when calling updateFleetDispatchJobs";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispatchJobsResponse;

      return this.apiClient.callApi(
        '/fleet/dispatch_jobs/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVehicles operation.
     * @callback module:client/FleetApi~updateVehiclesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /fleet/set_data
     * This method enables the mutation of metadata for vehicles in the Samsara Cloud.
     * @param {String} accessToken Samsara API access token.
     * @param {module:models/VehicleUpdateParam} vehicleUpdateParam 
     * @param {module:client/FleetApi~updateVehiclesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateVehicles = function(accessToken, vehicleUpdateParam, callback) {
      var postBody = vehicleUpdateParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling updateVehicles";
      }

      // verify the required parameter 'vehicleUpdateParam' is set
      if (vehicleUpdateParam == undefined || vehicleUpdateParam == null) {
        throw "Missing the required parameter 'vehicleUpdateParam' when calling updateVehicles";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleet/set_data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
