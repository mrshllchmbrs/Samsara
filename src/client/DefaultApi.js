/**
 * Samsara API
 * 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'models/AddressParam', 'models/ErrorResponse', 'models/InlineResponse200', 'models/GroupParam', 'models/InlineResponse2001', 'models/TripResponse', 'models/TripsParam', 'models/InlineResponse2002', 'models/HistoryParam', 'models/SensorHistoryResponse', 'models/HumidityResponse', 'models/SensorParam', 'models/TemperatureResponse', 'models/VehicleUpdateParam'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../models/AddressParam'), require('../models/ErrorResponse'), require('../models/InlineResponse200'), require('../models/GroupParam'), require('../models/InlineResponse2001'), require('../models/TripResponse'), require('../models/TripsParam'), require('../models/InlineResponse2002'), require('../models/HistoryParam'), require('../models/SensorHistoryResponse'), require('../models/HumidityResponse'), require('../models/SensorParam'), require('../models/TemperatureResponse'), require('../models/VehicleUpdateParam'));
  } else {
    // Browser globals (root is window)
    if (!root.SamsaraApi) {
      root.SamsaraApi = {};
    }
    root.SamsaraApi.DefaultApi = factory(root.SamsaraApi.ApiClient, root.SamsaraApi.AddressParam, root.SamsaraApi.ErrorResponse, root.SamsaraApi.InlineResponse200, root.SamsaraApi.GroupParam, root.SamsaraApi.InlineResponse2001, root.SamsaraApi.TripResponse, root.SamsaraApi.TripsParam, root.SamsaraApi.InlineResponse2002, root.SamsaraApi.HistoryParam, root.SamsaraApi.SensorHistoryResponse, root.SamsaraApi.HumidityResponse, root.SamsaraApi.SensorParam, root.SamsaraApi.TemperatureResponse, root.SamsaraApi.VehicleUpdateParam);
  }
}(this, function(ApiClient, AddressParam, ErrorResponse, InlineResponse200, GroupParam, InlineResponse2001, TripResponse, TripsParam, InlineResponse2002, HistoryParam, SensorHistoryResponse, HumidityResponse, SensorParam, TemperatureResponse, VehicleUpdateParam) {
  'use strict';

  /**
   * Default service.
   * @module client/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:client/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addFleetAddress operation.
     * @callback module:client/DefaultApi~addFleetAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an address book entry for the group.
     * @param {String} accessToken 
     * @param {module:models/AddressParam} addressParam 
     * @param {module:client/DefaultApi~addFleetAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFleetAddress = function(accessToken, addressParam, callback) {
      var postBody = addressParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling addFleetAddress";
      }

      // verify the required parameter 'addressParam' is set
      if (addressParam == undefined || addressParam == null) {
        throw "Missing the required parameter 'addressParam' when calling addFleetAddress";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleet/add_address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleet operation.
     * @callback module:client/DefaultApi~getFleetCallback
     * @param {String} error Error message, if any.
     * @param {module:models/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the vehicles for the group.
     * @param {String} accessToken 
     * @param {module:models/GroupParam} groupParam 
     * @param {module:client/DefaultApi~getFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/InlineResponse200}
     */
    this.getFleet = function(accessToken, groupParam, callback) {
      var postBody = groupParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling getFleet";
      }

      // verify the required parameter 'groupParam' is set
      if (groupParam == undefined || groupParam == null) {
        throw "Missing the required parameter 'groupParam' when calling getFleet";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/fleet/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleetLocations operation.
     * @callback module:client/DefaultApi~getFleetLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:models/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the GPS locations for all vehicles in the group.
     * @param {String} accessToken 
     * @param {module:models/GroupParam} groupParam 
     * @param {module:client/DefaultApi~getFleetLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/InlineResponse2001}
     */
    this.getFleetLocations = function(accessToken, groupParam, callback) {
      var postBody = groupParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling getFleetLocations";
      }

      // verify the required parameter 'groupParam' is set
      if (groupParam == undefined || groupParam == null) {
        throw "Missing the required parameter 'groupParam' when calling getFleetLocations";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/fleet/locations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleetTrips operation.
     * @callback module:client/DefaultApi~getFleetTripsCallback
     * @param {String} error Error message, if any.
     * @param {module:models/TripResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the trips for the specified vehicle.
     * @param {String} accessToken 
     * @param {module:models/TripsParam} tripsParam 
     * @param {module:client/DefaultApi~getFleetTripsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/TripResponse}
     */
    this.getFleetTrips = function(accessToken, tripsParam, callback) {
      var postBody = tripsParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling getFleetTrips";
      }

      // verify the required parameter 'tripsParam' is set
      if (tripsParam == undefined || tripsParam == null) {
        throw "Missing the required parameter 'tripsParam' when calling getFleetTrips";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TripResponse;

      return this.apiClient.callApi(
        '/fleet/trips', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSensors operation.
     * @callback module:client/DefaultApi~getSensorsCallback
     * @param {String} error Error message, if any.
     * @param {module:models/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sensors for a group.
     * @param {String} accessToken 
     * @param {module:models/GroupParam} groupParam 
     * @param {module:client/DefaultApi~getSensorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/InlineResponse2002}
     */
    this.getSensors = function(accessToken, groupParam, callback) {
      var postBody = groupParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling getSensors";
      }

      // verify the required parameter 'groupParam' is set
      if (groupParam == undefined || groupParam == null) {
        throw "Missing the required parameter 'groupParam' when calling getSensors";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/sensors/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSensorsHistory operation.
     * @callback module:client/DefaultApi~getSensorsHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:models/SensorHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the historical data for the sensors.
     * @param {String} accessToken 
     * @param {module:models/HistoryParam} historyParam 
     * @param {module:client/DefaultApi~getSensorsHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/SensorHistoryResponse}
     */
    this.getSensorsHistory = function(accessToken, historyParam, callback) {
      var postBody = historyParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling getSensorsHistory";
      }

      // verify the required parameter 'historyParam' is set
      if (historyParam == undefined || historyParam == null) {
        throw "Missing the required parameter 'historyParam' when calling getSensorsHistory";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SensorHistoryResponse;

      return this.apiClient.callApi(
        '/sensors/history', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSensorsHumidity operation.
     * @callback module:client/DefaultApi~getSensorsHumidityCallback
     * @param {String} error Error message, if any.
     * @param {module:models/HumidityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current humidity readings for the specified sensors.
     * @param {String} accessToken 
     * @param {module:models/SensorParam} sensorParam 
     * @param {module:client/DefaultApi~getSensorsHumidityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/HumidityResponse}
     */
    this.getSensorsHumidity = function(accessToken, sensorParam, callback) {
      var postBody = sensorParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling getSensorsHumidity";
      }

      // verify the required parameter 'sensorParam' is set
      if (sensorParam == undefined || sensorParam == null) {
        throw "Missing the required parameter 'sensorParam' when calling getSensorsHumidity";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = HumidityResponse;

      return this.apiClient.callApi(
        '/sensors/humidity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSensorsTemperature operation.
     * @callback module:client/DefaultApi~getSensorsTemperatureCallback
     * @param {String} error Error message, if any.
     * @param {module:models/TemperatureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current temperature readings for the specified sensors.
     * @param {String} accessToken 
     * @param {module:models/SensorParam} sensorParam 
     * @param {module:client/DefaultApi~getSensorsTemperatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:models/TemperatureResponse}
     */
    this.getSensorsTemperature = function(accessToken, sensorParam, callback) {
      var postBody = sensorParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling getSensorsTemperature";
      }

      // verify the required parameter 'sensorParam' is set
      if (sensorParam == undefined || sensorParam == null) {
        throw "Missing the required parameter 'sensorParam' when calling getSensorsTemperature";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TemperatureResponse;

      return this.apiClient.callApi(
        '/sensors/temperature', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVehicles operation.
     * @callback module:client/DefaultApi~updateVehiclesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the metadata for a vehicle.
     * @param {String} accessToken 
     * @param {module:models/VehicleUpdateParam} vehicleUpdateParam 
     * @param {module:client/DefaultApi~updateVehiclesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateVehicles = function(accessToken, vehicleUpdateParam, callback) {
      var postBody = vehicleUpdateParam;

      // verify the required parameter 'accessToken' is set
      if (accessToken == undefined || accessToken == null) {
        throw "Missing the required parameter 'accessToken' when calling updateVehicles";
      }

      // verify the required parameter 'vehicleUpdateParam' is set
      if (vehicleUpdateParam == undefined || vehicleUpdateParam == null) {
        throw "Missing the required parameter 'vehicleUpdateParam' when calling updateVehicles";
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': accessToken
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleet/set_data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
